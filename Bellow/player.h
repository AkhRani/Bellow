#ifndef PLAYER_H
#define PLAYER_H

#include <stdint.h>
#include <string>
#include <vector>

#include "system_info.h"
#include "fleet.h"

class IStarSystemOwner;

extern "C" {
  struct lua_State;
}

/** Per-player information.
* This class will encapsulate or aggregate racials, tech advances,
* which systems have been explored, etc.
*/
class Player {
public:
  //! Constructor for testing purposes.  Should get rid of this
  Player(IStarSystemOwner& galaxy, const std::string &name);

  //! Deserializer constructor
  Player(IStarSystemOwner& galaxy, lua_State *L);

  //! Serializer
  void Save(std::string &rep);

  //! Player name
  const std::string &GetName() const { return m_Name; } ;

  //! Number of fleets owned by the player
  unsigned int GetFleetCount() const { return m_Fleets.size(); };
  //! Fleet information
  Fleet& GetFleet(int fleet) { return m_Fleets.at(fleet); }

  //! Launch Fleet, if possible
  bool SetFleetDestination(unsigned int fleet, unsigned int system);
  //! Update all fleet positions
  void MoveFleets();

  //! Ecological investment to "build" one population
  uint32_t GetPopCost();
  //! New population per unit of population, in percent
  uint32_t GetPopGrowthRate();
  //! Capital generated by each unit of population, in percent (100 = 1 BC per pop)
  uint32_t GetProductionPerPop();

  //! Number of factories operated by one unit of population
  uint32_t GetFactoriesPerPop();
  //! Cost of a factory
  uint32_t GetFactoryCost();
  //! Capital generated by one factory (100 = 1 BC per fact)
  uint32_t GetProductionPerFactory();

  //! Get the player's view of the given system
  void GetSystemInfo(unsigned int systemId, SystemInfo& info) const;

  //! Update the player's view of the given system
  void SetSystemInfo(unsigned int systemId, const SystemInfo& info);

protected:
  void LoadFleet(lua_State *L, int idx);
  void LoadSystemInfo(lua_State *L, int idx);

private:
  Player();
  IStarSystemOwner& m_SystemOwner;
  std::string m_Name;

  //! Fleets owned by the player
  std::vector<Fleet> m_Fleets;

  //! Most recent surveys of all star systems
  std::vector<SystemInfo> m_SystemInfo;
};

#endif